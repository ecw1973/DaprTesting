@page "/counterstate"
@using Dapr.Client
@using BlazorApp.Events
@inject DaprClient daprClient

<h1>Counter With Dapr State</h1>

<p>Current count: @currentCount</p>

<br />
<button class="btn btn-primary" @onclick="IncrementAndSaveCount">Increment</button>
<br />
<button class="btn btn-primary" @onclick="DecrementAndSaveCount">Decrement</button>
<br />
<button class="btn btn-primary" @onclick="ResetAndSaveCount">Reset</button>
<br/>

@code
{
    private int currentCount;

    protected override async Task OnInitializedAsync()
    {
        currentCount = await daprClient.GetStateAsync<int>("statestore", "counter");
    }

    private async Task IncrementAndSaveCount()
    {
        var oldCount = currentCount;
        currentCount++;

        await SaveAndPublish(new CounterChangedEvent { NewValue = currentCount, OldValue = oldCount });
    }

    private async Task DecrementAndSaveCount()
    {
        var oldCount = currentCount;
        currentCount--;

        await SaveAndPublish(new CounterChangedEvent { NewValue = currentCount, OldValue = oldCount });
    }

    private async Task ResetAndSaveCount()
    {
        var oldCount = currentCount;
        currentCount = 0;

        await SaveAndPublish(new CounterResetEvent() { NewValue = currentCount, OldValue = oldCount });
    }

    private async Task SaveAndPublish<T>(T theEventData) where T : ICounterChangedEvent
    {
        // Dapr State Store Call.
        // @see DaprTesting\DaprMutiContainer\dapr\components\stateStore.yaml
        await daprClient.SaveStateAsync("statestore", "counter", theEventData.NewValue);

        // Dapr Publish Event Call.
        // @see DaprTesting\DaprMutiContainer\dapr\components\pubsub.yaml
        await daprClient.PublishEventAsync("pubsub", theEventData.GetType().Name, theEventData);
    }


}
@page "/counterstate"
@using Dapr.Client
@using BlazorApp.Events
@inject DaprClient daprClient

<style>
    .buttonBox 
    {
        padding: 1.5rem;
        margin-right: 0;
        margin-left: 0;
        border-width: .2rem;
    }
</style>

<h1>Counter With Dapr State</h1>

<br/>

<div class=".buttonBox">
    <button class="btn btn-primary" @onclick="IncrementAndSaveCount">Increment</button>
    <button class="btn btn-info" @onclick="DecrementAndSaveCount">Decrement</button>
    <button class="btn btn-danger" @onclick="ResetAndSaveCount">Reset</button>
</div>

<br/>

<p>Current count: @currentCount</p>

@code
{
    private int currentCount;
    private const string DaprPubSubName = "pubsub";
    private const string DaprStateStoreName = "statestore";

    protected override async Task OnInitializedAsync()
    {
        // Dapr State Retrieve Call.
        // @see DaprTesting\DaprMutiContainer\dapr\components\stateStore.yaml
        currentCount = await daprClient.GetStateAsync<int>(DaprStateStoreName, "counter");
    }

    private async Task IncrementAndSaveCount()
    {
        var oldCount = currentCount;
        currentCount++;

        await SaveAndPublish(new CounterChangedEvent { NewValue = currentCount, OldValue = oldCount });
    }

    private async Task DecrementAndSaveCount()
    {
        var oldCount = currentCount;
        currentCount--;

        await SaveAndPublish(new CounterChangedEvent { NewValue = currentCount, OldValue = oldCount });
    }

    private async Task ResetAndSaveCount()
    {
        var oldCount = currentCount;
        currentCount = 0;

        await SaveAndPublish(new CounterResetEvent() { NewValue = currentCount, OldValue = oldCount });
    }

    private async Task SaveAndPublish<T>(T theEventData) where T : ICounterChangedEvent
    {
        // Dapr State Store Call.
        // @see DaprTesting\DaprMutiContainer\dapr\components\stateStore.yaml
        await daprClient.SaveStateAsync(DaprStateStoreName, "counter", theEventData.NewValue);

        // Dapr Publish Event Call.
        // @see DaprTesting\DaprMutiContainer\dapr\components\pubsub.yaml
        await daprClient.PublishEventAsync(DaprPubSubName, theEventData.GetType().Name, theEventData);
    }


}